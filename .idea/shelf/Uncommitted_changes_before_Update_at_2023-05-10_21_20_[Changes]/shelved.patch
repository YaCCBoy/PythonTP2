Index: serveur/Serveur_2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport json\r\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\r\n\r\n\r\nclass Handler:\r\n\r\n    def __init__(self):\r\n        self.__reservations = {}\r\n        self.__utilisateurs = {}\r\n        self.__chalets = {}\r\n\r\n    @property\r\n    def reservations(self):\r\n        return self.__reservations\r\n\r\n    def post_reservations(self, reservations, nouv_reservation):\r\n        if reservations not in self.__reservations:\r\n            raise ValueError('Réservation inexistante')\r\n        if nouv_reservation in self.__reservations[reservations]:\r\n            raise ValueError('Réservation déjà existante')\r\n        index = self.__reservations[reservations].index(reservations)\r\n        self.__reservations[reservations][index] = nouv_reservation\r\n\r\n    def put_reservations(self, nouv_reservation, anc_reservation):\r\n        if nouv_reservation == anc_reservation:\r\n            raise ValueError('Aucun changement dans la reservation')\r\n        for reservations, reservations_list in self.__reservations.items():\r\n            if anc_reservation in reservations_list:\r\n                index = reservations_list.index(anc_reservation)\r\n                reservations_list[index] = nouv_reservation\r\n                break\r\n        else:\r\n            raise ValueError('Réservation inexistante')\r\n\r\n    def get_reservation(self, ID_reservation):\r\n        for reservations, reservations_list in self.__reservations.items():\r\n            if ID_reservation in reservations_list:\r\n                return reservations_list[0]\r\n        raise ValueError('ID inexistant')\r\n\r\n    def get_reservations(self, email):\r\n        if email in self.__reservations:\r\n            return self.__reservations[email]\r\n        raise ValueError('Email inexistant')\r\n\r\n    def post_utilisateur(self, reservations, utilisateur):\r\n        if reservations not in self.__utilisateurs:\r\n            self.__utilisateurs[reservations] = []\r\n        if utilisateur in self.__utilisateurs[reservations]:\r\n            raise ValueError('Utilisateur déjà existant')\r\n        self.__utilisateurs[reservations].append(utilisateur)\r\n\r\n    def post_chalet(self, chalets, chalet):\r\n        if chalets not in self.__chalets:\r\n            self.__chalets[chalets] = []\r\n        if chalet in self.__chalets[chalets]:\r\n            raise ValueError('Chalet déjà existant')\r\n        self.__chalets[chalets].append(chalet)\r\n\r\n    def get_chalet(self, ID_chalet):\r\n        for chalets, chalets_list in self.__chalets.items():\r\n            if ID_chalet in chalets_list:\r\n                return chalets_list[0]\r\n        raise ValueError('ID de chalet inexistant')\r\n\r\n    def post_chalet_reservation(self, reservations, ID_chalet, plage):\r\n        if reservations in self.__reservations:\r\n            if ID_chalet in self.__reservations[reservations]:\r\n                self.__reservations[reservations][ID_chalet].append(plage)\r\n            else:\r\n                raise ValueError('ID de chalet inexistant')\r\n        else:\r\n            raise ValueError('Réservation inexistante')\r\n\r\n\r\nclass TPBaseHTTPRequestHandler(BaseHTTPRequestHandler):\r\n\r\n    handler = Handler()\r\n    # Permet la gestion de toutes les requetes de type get\r\n    def do_GET(self):\r\n        path = self.path\r\n        print(path)\r\n\r\n        if path.startswith('/reservation/'):\r\n            reservation = path.split('/')[2]\r\n            content = 'Reservation: ' + reservation + ' -> ' + str(self.handler.get_reservation(reservation))\r\n            self.send_response(200)\r\n            self.send_header('Content-type', 'text/html')\r\n            self.end_headers()\r\n            self.wfile.write(bytes(content, 'utf-8'))\r\n\r\n        elif path.startswith('/reservations/'):\r\n            reservations = path.split('/')[2]\r\n            content = 'Reservations: ' + reservations + ' -> ' + str(self.handler.get_reservations(reservations))\r\n            self.send_response(200)\r\n            self.send_header('Content-type', 'text/html')\r\n            self.end\r\nclass ServeurTest:\r\n\r\n    # Méthode pour initialiser le serveur et le garder en marche\r\n    @staticmethod\r\n    def run(serveur_class=HTTPServer, serveur_port=8000, handler_class=TPBaseHTTPRequestHandler):\r\n        # le serveur va écouter sur localhost sur le port passé en paramètre\r\n        serveur_adresse = ('localhost', serveur_port)\r\n        # Les requêtes vont être gérées par handler_class passé en paramètre (notre class TPBaseHTTPRequestHandler\r\n        # par défaut)\r\n        httpd = serveur_class(serveur_adresse, handler_class)\r\n        # Écoute pour des requêtes jusqu'à ce qu'on arrête le serveur\r\n        httpd.serve_forever()\r\n\r\nimport unittest\r\n\r\n\r\n#Test unitaires\r\n\r\nclass TestHandler(unittest.TestCase):\r\n\r\n    def setUp(self):\r\n        self.handler = Handler()\r\n\r\n    def test_post_reservations(self):\r\n        self.handler.post_reservations(\"John\", \"Reservation 1\")\r\n        self.assertEqual(self.handler.reservations[\"John\"], [\"Reservation 1\"])\r\n\r\n    def test_post_reservations_existing(self):\r\n        self.handler.reservations = {\"John\": [\"Reservation 1\"]}\r\n        with self.assertRaises(ValueError):\r\n            self.handler.post_reservations(\"John\", \"Reservation 1\")\r\n\r\n    def test_put_reservations(self):\r\n        self.handler.reservations = {\"John\": [\"Reservation 1\"]}\r\n        self.handler.put_reservations(\"Reservation 2\", \"Reservation 1\")\r\n        self.assertEqual(self.handler.reservations[\"John\"], [\"Reservation 2\"])\r\n\r\n    def test_put_reservations_no_change(self):\r\n        self.handler.reservations = {\"John\": [\"Reservation 1\"]}\r\n        with self.assertRaises(ValueError):\r\n            self.handler.put_reservations(\"Reservation 1\", \"Reservation 1\")\r\n\r\n    def test_get_reservation(self):\r\n        self.handler.reservations = {\"John\": [\"Reservation 1\"]}\r\n        reservation = self.handler.get_reservation(\"Reservation 1\")\r\n        self.assertEqual(reservation, \"Reservation 1\")\r\n\r\n    def test_get_reservation_nonexistent(self):\r\n        self.handler.reservations = {\"John\": [\"Reservation 1\"]}\r\n        with self.assertRaises(ValueError):\r\n            self.handler.get_reservation(\"Reservation 2\")\r\n\r\n    def test_get_reservations(self):\r\n        self.handler.reservations = {\"john@example.com\": [\"Reservation 1\", \"Reservation 2\"]}\r\n        reservations = self.handler.get_reservations(\"john@example.com\")\r\n        self.assertEqual(reservations, [\"Reservation 1\", \"Reservation 2\"])\r\n\r\n    def test_get_reservations_nonexistent(self):\r\n        self.handler.reservations = {\"john@example.com\": [\"Reservation 1\", \"Reservation 2\"]}\r\n        with self.assertRaises(ValueError):\r\n            self.handler.get_reservations(\"jane@example.com\")\r\n\r\n    def test_post_utilisateur(self):\r\n        self.handler.post_utilisateur(\"Reservation 1\", \"John\")\r\n        self.assertEqual(self.handler.utilisateurs[\"Reservation 1\"], [\"John\"])\r\n\r\n    def test_post_utilisateur_existing(self):\r\n        self.handler.utilisateurs = {\"Reservation 1\": [\"John\"]}\r\n        with self.assertRaises(ValueError):\r\n            self.handler.post_utilisateur(\"Reservation 1\", \"John\")\r\n\r\n    def test_post_chalet(self):\r\n        self.handler.post_chalet(\"Resort A\", \"Chalet 1\")\r\n        self.assertEqual(self.handler.chalets[\"Resort A\"], [\"Chalet 1\"])\r\n\r\n    def test_post_chalet_existing(self):\r\n        self.handler.chalets = {\"Resort A\": [\"Chalet 1\"]}\r\n        with self.assertRaises(ValueError):\r\n            self.handler.post_chalet(\"Resort A\", \"Chalet 1\")\r\n\r\n    def test_get_chalet(self):\r\n        self.handler.chalets = {\"Resort A\": [\"Chalet 1\"]}\r\n        chalet = self.handler.get_chalet(\"Chalet 1\")\r\n        self.assertEqual(chalet, \"Chalet 1\")\r\n\r\n    def test_get_chalet_nonexistent(self):\r\n        self.handler.chalets = {\"Resort A\": [\"Chalet 1\"]}\r\n        with self.assertRaises(ValueError):\r\n            self.handler.get_chalet(\"Chalet 2\")\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/serveur/Serveur_2.py b/serveur/Serveur_2.py
--- a/serveur/Serveur_2.py	(revision 967c03918cf627f23b6c4e211f2b6cfcecf300a6)
+++ b/serveur/Serveur_2.py	(date 1683766755876)
@@ -1,4 +1,3 @@
-
 import json
 from http.server import HTTPServer, BaseHTTPRequestHandler
 
Index: impex/impex.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv\r\nimport xmltodict\r\n#import client\r\n\r\nclass Utilisateur:\r\n    def __init__(self, email, mdp, nom, prenom, type, adresse_no, adresse_rue, adresse_ville, adresse_prov, adresse_pays, adresse_cp):\r\n        self.__email = email\r\n        self.__mdp = mdp\r\n        self.__nom = nom\r\n        self.__prenom = prenom\r\n        self.__type = type\r\n        self.__adresse_no = adresse_no\r\n        self.__adresse_rue = adresse_rue\r\n        self.__adresse_ville = adresse_ville\r\n        self.__adresse_prov = adresse_prov\r\n        self.__adresse_pays = adresse_pays\r\n        self.__adresse_cp = adresse_cp\r\n\r\n    @property\r\n    def email(self):\r\n        return self.__email\r\n\r\n    @email.setter\r\n    def email(self, valeur):\r\n        self.__email = valeur\r\n\r\n    @property\r\n    def mdp(self):\r\n        return self.__mdp\r\n\r\n    @mdp.setter\r\n    def mdp(self, valeur):\r\n        self.__mdp = valeur\r\n\r\n    @property\r\n    def nom(self):\r\n        return self.__nom\r\n\r\n    @nom.setter\r\n    def nom(self, valeur):\r\n        self.__nom = valeur\r\n\r\n    @property\r\n    def prenom(self):\r\n        return self.__prenom\r\n\r\n    @prenom.setter\r\n    def prenom(self, valeur):\r\n        self.__prenom = valeur\r\n\r\n    @property\r\n    def type(self):\r\n        return self.__type\r\n\r\n    @type.setter\r\n    def type(self, valeur):\r\n        self.__type = valeur\r\n\r\n    @property\r\n    def adresse_no(self):\r\n        return self.__adresse_no\r\n\r\n    @adresse_no.setter\r\n    def adresse_no(self, valeur):\r\n        self.__adresse_no = valeur\r\n\r\n    @property\r\n    def adresse_rue(self):\r\n        return self.__adresse_rue\r\n\r\n    @adresse_rue.setter\r\n    def adresse_rue(self, valeur):\r\n        self.__adresse_rue = valeur\r\n\r\n    @property\r\n    def adresse_ville(self):\r\n        return self.__adresse_ville\r\n\r\n    @adresse_ville.setter\r\n    def adresse_ville(self, valeur):\r\n        self.__adresse_ville = valeur\r\n\r\n    @property\r\n    def adresse_prov(self):\r\n        return self.__adresse_prov\r\n\r\n    @adresse_prov.setter\r\n    def adresse_prov(self, valeur):\r\n        self.__adresse_prov = valeur\r\n\r\n    @property\r\n    def adresse_pays(self):\r\n        return self.__adresse_pays\r\n\r\n    @adresse_pays.setter\r\n    def adresse_pays(self, valeur):\r\n        self.__adresse_pays = valeur\r\n\r\n    @property\r\n    def adresse_cp(self):\r\n        return self.__adresse_cp\r\n\r\n    @adresse_cp.setter\r\n    def adresse_cp(self, valeur):\r\n        self.__adresse_cp = valeur\r\n\r\nclass Chalet:\r\n    def __init__(self, id, nom, url_image):\r\n        self.__id = id\r\n        self.__nom = nom\r\n        self.__url_image = url_image\r\n\r\n    @property\r\n    def id(self):\r\n        return self.__id\r\n\r\n    @id.setter\r\n    def id(self, valeur):\r\n        self.__id = valeur\r\n\r\n    @property\r\n    def nom(self, nom):\r\n        return self.__nom\r\n\r\n    @nom.setter\r\n    def nom(self, valeur):\r\n        self.__nom = valeur\r\n\r\n    @property\r\n    def url_image(self):\r\n        return self.__url_image\r\n\r\n    @url_image.setter\r\n    def url_image(self, valeur):\r\n        self.__url_image = valeur\r\n\r\ndef data_utilisateurs() :\r\n    with open(\"./data/utilisateurs.csv\") as csvfile :\r\n        reader1 = csv.DictReader(csvfile)\r\n\r\n\r\ndef data_chalets() :\r\n    with open('./data/chalets.csv') as csvfile :\r\n        reader2 = csv.DictReader(csvfile)\r\n\r\ndef data_reservations() :\r\n    file1 = open('./data/reservations.xml', 'r')\r\n    xml_string = file1.read()\r\n    reservation_dict = xmltodict.parse(xml_string)\r\n    print(reservation_dict)\r\n\r\ndef data_dipos() :\r\n    file2 = open('./data/disponibilites.xml', 'r')\r\n    xml_string = file2.read()\r\n    dispos_dict = xmltodict.parse(xml_string)\r\n    print(dispos_dict)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/impex/impex.py b/impex/impex.py
--- a/impex/impex.py	(revision 967c03918cf627f23b6c4e211f2b6cfcecf300a6)
+++ b/impex/impex.py	(date 1683767348888)
@@ -1,6 +1,6 @@
 import csv
 import xmltodict
-#import client
+from client import client
 
 class Utilisateur:
     def __init__(self, email, mdp, nom, prenom, type, adresse_no, adresse_rue, adresse_ville, adresse_prov, adresse_pays, adresse_cp):
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"436508e9-1419-4243-93c0-d010826958e3\" name=\"Changes\" comment=\"Enlevé des trucs inutiles dans impex\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2PHxRPY6kYdKIwqnWnFb8Y6yHIC\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/lepep/OneDrive/Documents/École/Session 2/Programmation orientée objet/TP2/PythonTP2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"436508e9-1419-4243-93c0-d010826958e3\" name=\"Changes\" comment=\"\" />\r\n      <created>1683127800473</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1683127800473</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Ajouter encore plus de trucs inutiles\">\r\n      <created>1683128915038</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683128915038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Ajout des classes Utilisateur et Chalet et de leurs getters et setters. Ajout de &quot;import client&quot;\">\r\n      <created>1683593333836</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683593333836</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Comment out le import client\">\r\n      <created>1683674977325</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683674977325</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Ajout des trucs dans le client mais tbh je comprends rien quand même\">\r\n      <created>1683680939297</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683680939297</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Enlevé des trucs inutiles dans impex\">\r\n      <created>1683729605245</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683729605245</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.csv\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Ajouter encore plus de trucs inutiles\" />\r\n    <MESSAGE value=\"Ajout des classes Utilisateur et Chalet et de leurs getters et setters. Ajout de &quot;import client&quot;\" />\r\n    <MESSAGE value=\"Comment out le import client\" />\r\n    <MESSAGE value=\"Ajout des trucs dans le client mais tbh je comprends rien quand même\" />\r\n    <MESSAGE value=\"Enlevé des trucs inutiles dans impex\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Enlevé des trucs inutiles dans impex\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 967c03918cf627f23b6c4e211f2b6cfcecf300a6)
+++ b/.idea/workspace.xml	(date 1683767186113)
@@ -4,8 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="436508e9-1419-4243-93c0-d010826958e3" name="Changes" comment="Enlevé des trucs inutiles dans impex">
+    <list default="true" id="436508e9-1419-4243-93c0-d010826958e3" name="Changes" comment="Enlevé des trucs inutiles dans impex 2.0">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/impex/impex.py" beforeDir="false" afterPath="$PROJECT_DIR$/impex/impex.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/serveur/Serveur_2.py" beforeDir="false" afterPath="$PROJECT_DIR$/serveur/Serveur_2.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -31,6 +33,27 @@
     &quot;last_opened_file_path&quot;: &quot;C:/Users/lepep/OneDrive/Documents/École/Session 2/Programmation orientée objet/TP2/PythonTP2&quot;
   }
 }</component>
+  <component name="RunManager">
+    <configuration name="Python tests for Serveur_2.TestHandler.test_post_chalet" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+      <module name="PythonTP2" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/serveur" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="_new_additionalArguments" value="&quot;&quot;" />
+      <option name="_new_target" value="&quot;Serveur_2.TestHandler.test_post_chalet&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python tests.Python tests for Serveur_2.TestHandler.test_post_chalet" />
+      </list>
+    </recent_temporary>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -75,7 +98,14 @@
       <option name="project" value="LOCAL" />
       <updated>1683729605245</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="Enlevé des trucs inutiles dans impex 2.0">
+      <created>1683733320521</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1683733320521</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="UnknownFeatures">
@@ -98,6 +128,7 @@
     <MESSAGE value="Comment out le import client" />
     <MESSAGE value="Ajout des trucs dans le client mais tbh je comprends rien quand même" />
     <MESSAGE value="Enlevé des trucs inutiles dans impex" />
-    <option name="LAST_COMMIT_MESSAGE" value="Enlevé des trucs inutiles dans impex" />
+    <MESSAGE value="Enlevé des trucs inutiles dans impex 2.0" />
+    <option name="LAST_COMMIT_MESSAGE" value="Enlevé des trucs inutiles dans impex 2.0" />
   </component>
 </project>
\ No newline at end of file
